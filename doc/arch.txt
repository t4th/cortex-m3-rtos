@startuml
set namespaceSeparator ::

class kernel::kernel{
-internal::system_timer::Context
-internal::task::Context
-internal::scheduler::Context
-internal::timer::Context
-internal::event::Context

-storeContext()
-loadContext()
-loadNextTask()
-switchContext()
-tick()

+ init()
+ start()
+ getTime()
}

kernel::kernel -d-> kernel::system_timer
kernel::kernel -l-> kernel::lock
kernel::kernel -> kernel::hardware::hardware
kernel::kernel -d-> kernel::task
kernel::kernel -d-> kernel::critical_section
kernel::kernel -d-> kernel::event
kernel::kernel -d-> kernel::timer
kernel::kernel -d-> kernel::sync

kernel::kernel -d-> kernel::internal::scheduler
kernel::kernel -d-> kernel::internal::handle

class kernel::config
{
}

class kernel::system_timer {
+get()
+increment()
+isIntervalElapsed()
}

class kernel::lock {
+isLocked()
+enter()
+leave()
}

class kernel::task {
 +create()
 +terminate()
 + getCurrent()
 + suspend()
 + resume()
 + sleep()
}

kernel::task -d-> kernel::internal::task

class kernel::critical_section {
+init()
+deinit()
+enter()
+leave()
}

class kernel::sync {
+waitForSingleObject()
+waitForMultipleObjects()
}

kernel::sync -d-> kernel::internal::task
kernel::kernel -> kernel::internal::task

class kernel::event {
+create()
+set()
+reset()
+destroy()
}

kernel::event -> kernel::internal::event

class kernel::timer {
+create()
+destroy()
+start()
+stop()
}

kernel::timer -> kernel::internal::timer

class kernel::internal::common {
 memory_buffer
 circular_list
}

class kernel::internal::task {
+ create()
+ destroy()
}

kernel::internal::task -d-> kernel::hardware::task

kernel::internal::task -d-> kernel::hardware::sp

class kernel::internal::scheduler {
- ready_list
- wait_list
+ addReadyTask()
+ addSuspendedTask()
+ resumeSuspendedTask()
+ setTaskToSuspended()
+ setTaskToWait()
+ removeTask()
+ getCurrentTaskId()
+ getNextTask()
+ getCurrentTask()
+ checkWaitConditions()
}


class kernel::internal::event {
+ create()
+ destroy()
+ set()
+ reset()
+ getState()
}

class kernel::internal::timer {
+ create()
+ destroy()
+ set()
+ reset()
+ getState()
+ tick()
}

class kernel::internal::handle {
+ create()
+ getIndex()
+ getObjectType()
+ getId()
}

class kernel::hardware::hardware {
-current_task_context
-next_task_context
+init()
+start()
+syscall()
}

kernel::hardware::hardware -> kernel::kernel

class kernel::hardware::debug {
+ putChar()
+ print()
+ setBreakpoint()
}

class kernel::hardware::interrupt {
+ enableAll()
+ disableAll()
}

class kernel::hardware::sp {
+ set()
+ get()
}

class kernel::hardware::task {
+ Context
+ Stack
}
@enduml