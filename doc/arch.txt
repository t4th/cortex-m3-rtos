@startuml
set namespaceSeparator ::
hide circle

hide <<tag>> 
class alignment <<tag>>{
}

note as MainNote
    <b>kernel</b> namespace provide kernel API to User, which include nested namespaces.
    For example <b>kernel::hardware</b> expose ARM Core functionality abstractions.
    
    <b>kernel::internal</b> components are implementation details and should not be accessed by User.
end note

class user
{
+ main()
}

alignment -[hidden]d-> user

class kernel::kernel << namespace >>{
-internal::system_timer::Context
-internal::task::Context
-internal::scheduler::Context
-internal::timer::Context
-internal::event::Context

-internal::storeContext()
-internal::loadContext()
-internal::loadNextTask()
-internal::switchContext()
-internal::tick()

+ init()
+ start()
+ getTime()
}

user .d.|> kernel::kernel : <<use>>
kernel::kernel -d-> kernel::internal::system_timer
kernel::kernel -d-> kernel::internal::lock

kernel::kernel -[hidden]d-> kernel::task
kernel::kernel -[hidden]d-> kernel::critical_section
kernel::kernel -[hidden]d-> kernel::event
kernel::kernel -[hidden]d-> kernel::timer
kernel::kernel -[hidden]d-> kernel::sync
kernel::kernel <-> kernel::internal::hardware::hardware

kernel::kernel -d-> kernel::internal::scheduler
kernel::kernel -d-> kernel::internal::handle

kernel::kernel -[hidden]r-> kernel::hardware::critical_section

class kernel::config << namespace >>
{
}

class kernel::task << namespace >>{
 +create()
 +terminate()
 + getCurrent()
 + suspend()
 + resume()
 + sleep()
}

kernel::task -d-> kernel::internal::task

class kernel::critical_section << namespace >>{
+init()
+deinit()
+enter()
+leave()
}

class kernel::sync << namespace >>{
+waitForSingleObject()
+waitForMultipleObjects()
}

kernel::sync -d-> kernel::internal::task
kernel::kernel -> kernel::internal::task

class kernel::event << namespace >>{
+create()
+set()
+reset()
+destroy()
}

kernel::event -> kernel::internal::event

class kernel::timer << namespace >>{
+create()
+destroy()
+start()
+stop()
}

kernel::timer -> kernel::internal::timer

class kernel::internal::common << namespace >>{
 memory_buffer
 circular_list
}

class kernel::internal::task << namespace >>{
+ create()
+ destroy()
}

kernel::internal::task -d-> kernel::internal::hardware::task

kernel::internal::task -d-> kernel::internal::hardware::sp

class kernel::internal::scheduler << namespace >>{
- ready_list
- wait_list
+ addReadyTask()
+ addSuspendedTask()
+ resumeSuspendedTask()
+ setTaskToSuspended()
+ setTaskToWait()
+ removeTask()
+ getCurrentTaskId()
+ getNextTask()
+ getCurrentTask()
+ checkWaitConditions()
}

class kernel::internal::event << namespace >>{
+ create()
+ destroy()
+ set()
+ reset()
+ getState()
}

class kernel::internal::timer << namespace >>{
+ create()
+ destroy()
+ set()
+ reset()
+ getState()
+ tick()
}

class kernel::internal::handle << namespace >>{
+ create()
+ getIndex()
+ getObjectType()
+ getId()
}


class kernel::internal::system_timer << namespace >>{
+get()
+increment()
+isIntervalElapsed()
}

class kernel::internal::lock << namespace >>{
+isLocked()
+enter()
+leave()
}

class kernel::internal::hardware::hardware << namespace >>{
-current_task_context
-next_task_context
+init()
+start()
+syscall()
}

class kernel::hardware::critical_section << namespace >>{
+ Context
+ enter()
+ leave()
}

class kernel::hardware::interrupt << namespace >>{
+ enable()
+ wait()
}


class kernel::hardware::interrupt::priority << namespace >>{
+ enum class Preemption
+ enum class Sub
+ set()
}

class kernel::hardware::debug << namespace >>{
+ putChar()
+ print()
+ setBreakpoint()
}

class kernel::internal::hardware::sp << namespace >>{
+ set()
+ get()
}

class kernel::internal::hardware::task << namespace >>{
+ Context
+ Stack
}
@enduml